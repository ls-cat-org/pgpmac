.TH "lsupdate.c" 3 "Wed Nov 14 2012" "LS-CAT PGPMAC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lsupdate.c \- 
.PP
Brings this MD2 code and the database kvs table into agreement\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'pgpmac\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlsupdate_updateit\fP ()"
.br
.RI "\fIQuery the motors and perhaps tell the DB about it\&. \fP"
.ti -1c
.RI "void * \fBlsupdate_worker\fP (void *dummy)"
.br
.RI "\fIOur worker thread\&. \fP"
.ti -1c
.RI "void \fBlsupdate_init\fP ()"
.br
.RI "\fIInitialize this module\&. \fP"
.ti -1c
.RI "void \fBlsupdate_run\fP ()"
.br
.RI "\fIrun the update routines \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static pthread_t \fBlsupdate_thread\fP"
.br
.RI "\fIour worker thread \fP"
.in -1c
.SH "Detailed Description"
.PP 
Brings this MD2 code and the database kvs table into agreement\&. 

\fBDate:\fP
.RS 4
2012 
.RE
.PP
\fBAuthor:\fP
.RS 4
Keith Brister 
.RE
.PP
\fBCopyright:\fP
.RS 4
All Rights Reserved 
.RE
.PP

.PP
Definition in file \fBlsupdate\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void lsupdate_init ()"

.PP
Initialize this module\&. 
.PP
Definition at line 108 of file lsupdate\&.c\&.
.PP
.nf
                     {
}
.fi
.SS "void lsupdate_run ()"

.PP
run the update routines 
.PP
Definition at line 113 of file lsupdate\&.c\&.
.PP
.nf
                    {
  pthread_create( &lsupdate_thread, NULL, lsupdate_worker, NULL);
}
.fi
.SS "void lsupdate_updateit ()"

.PP
Query the motors and perhaps tell the DB about it\&. 
.PP
Definition at line 15 of file lsupdate\&.c\&.
.PP
.nf
                         {
  static char s[4096];
  static char s1[512];
  lspmac_motor_t *mp;
  int i;
  int needComma;
  int gotone;

  needComma = 0;
  gotone = 0;
  s[0] = 0;
  strcpy(s, 'select px\&.kvupdate('{');

  for( i=0; i<lspmac_nmotors; i++) {
    mp = &(lspmac_motors[i]);

    pthread_mutex_lock( &(mp->mutex));
    //
    // Bit 0 of lspg_initialized is 0 if we've not yet initialized the motor values via the DB
    // Bit 1 of lspg_initialized is 0 if we've not yet sent any update for this motor
    //
    // Never update if the database has not initialized the motor values
    // Then, always update if we've not done so yet
    // Then, only update if the current position has changed significantly
    //
    if( ((mp->lspg_initialized & 1) == 0) ||
        ((mp->lspg_initialized & 2) != 0) &&
        (fabs( mp->position - mp->reported_position) < mp->update_resolution)
        ) {
      pthread_mutex_unlock( &(mp->mutex));
    } else {

      gotone = 1;
      s1[0]=0;

      snprintf( s1, sizeof(s1)-1, mp->update_format, mp->position);
      s1[sizeof(s1)-1] = 0;
    
      if( mp->name != NULL && mp->status1_p != NULL && mp->status2_p != NULL && mp->actual_pos_cnts_p != NULL) {
        lslogging_log_message( '%s status1: %0x  status2: %0x  cnts: %d', mp->name, mp->status1, mp->status2, mp->actual_pos_cnts);
      }

      mp->reported_position = mp->position;
      mp->lspg_initialized |= 2;
      pthread_mutex_unlock( &(mp->mutex));

      if( strlen(s1) + strlen(s) + 32 >= sizeof( s)-1) {
        // send off update now and reset s
        strcat( s, '}'::text[])');
        lspg_query_push( NULL, s);
        
        lslogging_log_message( 'Update: %s', s);

        s[0] = 0;
        strcpy( s, 'select px\&.kvupdate('{');
        needComma = 0;
        gotone    = 0;
      }

      if( needComma)
        strcat( s, ',');
      else
        needComma=1;

      strcat( s, s1);
    }
  }

  if( gotone) {
    strcat( s, '}')');
    lspg_query_push( NULL, s);

    lslogging_log_message( 'Update: %s', s);
  }
}
.fi
.SS "void* lsupdate_worker (void *dummy)"

.PP
Our worker thread\&. \fBParameters:\fP
.RS 4
\fIdummy\fP Unused argument required by protocol 
.RE
.PP

.PP
Definition at line 93 of file lsupdate\&.c\&.
.PP
.nf
                        {
  static struct timespec naptime;

  naptime\&.tv_sec  = 0;
  naptime\&.tv_nsec = 500000000;
  while( 1) {
    lsupdate_updateit();
    nanosleep( &naptime, NULL);
  }    
}
.fi
.SH "Variable Documentation"
.PP 
.SS "pthread_t lsupdate_thread\fC [static]\fP"

.PP
our worker thread 
.PP
Definition at line 10 of file lsupdate\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for LS-CAT PGPMAC from the source code\&.
